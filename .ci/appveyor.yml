image: Visual Studio 2015

environment:
  global:
    PIP_CACHE_DIR: C:\pip_cache
    NUGET_EXE_NO_PROMPT: 1
    NUGET_HTTP_CACHE_PATH: C:\nuget_http_cache
    CHOCO_CACHE_DIR: C:\choco_cache
    PLATFORM: $(PLATFORM)
    MSYS_ROOT: C:\msys64
    MSYS_BIN: $(MSYS_ROOT)\usr\bin
    MINGW_BIN: C:\MinGW\bin
    WIN71_SDK_ROOT: C:\Program Files\Microsoft SDKs\Windows\v7.1
    VS14_VC: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC
    VS2017: C:\Program Files (x86)\Microsoft Visual Studio\2017
    VS2017_VC: $(VS2017)\Community\VC
    VIRTUALENV_NO_DOWNLOAD: 1
    VIRTUALENV_NO_PIP: 1
    VIRTUALENV_NO_SETUPTOOLS: 1
    VIRTUALENV_VERBOSE: 1
    TOX_PIP_VERSION: 9.0.3
    GOPATH: C:\gopath
    PATH: >-
      C:\python;C:\python\Scripts;$(PATH);$(MINGW_BIN);$(MSYS_BIN);
      %USERPROFILE%\.nuget\packages\fudge\1.3.0\tools;
      C:\ruby\bin;
      C:\jdk\bin;
      C:\miniconda;C:\miniconda\Scripts;
      $(GOPATH)\bin;
      $(APPVEYOR_BUILD_FOLDER)\node_modules\.bin;
      $(APPVEYOR_BUILD_FOLDER)\vendor\bin;
    JL_PKG: CoalaBears
    JULIA_PROJECT: '@.'
    BEAR_LIST: astyle cppcheck xmllint
    TOX_TEST_SELECTORS: pip-noreqs-npm-gem-go-perl-php-java8-adhoc
    TOX_FEATURES: check-noskip-codecov
    TOXENV: py$(PYTHON_MINOR_NODOTS)-$(TOX_TEST_SELECTORS)-$(TOX_FEATURES)-win

  matrix:
    - PYTHON_VERSION: 3.4.4
      PYTHON_MINOR_NODOTS: 34

    - PYTHON_VERSION: 3.6.8
      PYTHON_MINOR_NODOTS: 36

platform:
  - x64
  - x86

cache:
  - C:\nuget_http_cache
  - C:\choco_cache
  - "C:\\pip_cache"
  - "C:\\Users\\appveyor\\AppData\\Roaming\\nltk_data"
  - "%LOCALAPPDATA%\\Composer"

branches:
  except:
    - /^sils\/.*/

install:
  # Show initial state
  - python --version
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - node --version
  - which npm
  - npm --version
  - npm config get prefix
  - go version
  - ruby --version
  - perl --version
  - which gcc
  - gcc --version
  - which java
  - java -version
  - which javac
  - javac -version

  - .ci\vs_appveyor.cmd
  - which cl
  - cl & exit 0

  # Stores environment in registry, with minor tweaks
  - python .ci/fix_path.py
  - refreshenv

  - cp .ci/choco.config C:\ProgramData\chocolatey\config\chocolatey.config

  # Set up AppVeyor product versions, and install dummy choco entries for them
  - nuget install fudge -verbosity quiet
  - ps: fudge install -FudgefilePath .ci/Fudgefile.appveyor
  - choco list --local-only
  - refreshenv
  - echo %PATH%

  # Show updated SOE; versions should be as defined in top of the Fudgefile
  - python --version
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - node --version
  - which npm
  - npm --version
  - npm config get prefix
  - go version
  - ruby --version
  - perl --version
  - which gcc
  - gcc --version
  - which java
  - java -version
  - which javac
  - javac -version

  - conda --version

  - "%MSYS_BIN%\\date.exe"
  # Install lxml needed by for coala-bears as a wheel as libxml2 and libxslt
  # headers and library files are not available, and STATIC_DEPS=true often
  # results in linter problems due to different VS compilers and MS runtimes.
  - python -m pip install --prefer-binary lxml
  - python -m pip install pip==9.0.3 setuptools==21.2.2

  - python -m pip install
      --constraint bear-requirements.txt
      -r test-requirements.txt
      git+https://github.com/krkd/pytest-cov-threshold
      pytest-error-for-skips
      git+https://gitlab.com/coala/PyPrint#egg=PyPrint
      git+https://gitlab.com/coala/coala-utils#egg=coala-utils
      -r requirements.txt
      -r docs-requirements.txt

  - python -m pip install
      --constraint bear-requirements.txt
      pip==9.0.3 setuptools==21.2.2
      -e .
  - python -m pip install
      --constraint bear-requirements.txt
      tox tox-backticks
  - python -m pip install --upgrade
      --constraint bear-requirements.txt
      virtualenv
  - "%MSYS_BIN%\\date.exe"

  # Install remainer of the Fudgefile with chocolatey using Fudge
  - ps: fudge install
  - refreshenv
  - echo %PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  # Confirm other versions
  - node --version
  - which npm
  - npm --version
  - npm config get prefix
  - go version
  - ruby --version
  - perl --version
  - which gcc
  - gcc --version
  - which java
  - java -version
  - which javac
  - javac -version
  - conda --version
  # Newly installed versions
  - which composer & exit 0
  - composer --version & exit 0
  - ppm --version & exit 0

  - "%MSYS_BIN%\\date.exe"

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  - "sed -i 's/^envlist.*$/envlist: %TOXENV%/' tox.ini"
  - python -m tox -vvv
  - python setup.py install

  - rm -rf .tox
  - rm -f MYMETA.yml

  - sed -i '/ShellCheckBear/d' .coafile
  - coala --ci

matrix:
  fast_finish: true
