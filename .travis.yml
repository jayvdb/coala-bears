sudo: false
dist: trusty
python: 3.6

.disable_global: &disable_global
  addons: false
  cache: pip
  python: false
  before_install: false
  install: false
  before_script: false
  script: false
  after_success: false
  after_failure: false
  before_deploy: false
  deploy: false

stages:
  - test-current
  - test-apt
  - test-python
  - test-languages
  - test-other-versions
  - test-travis-community-langs
  - test-manual-langs
  - test-failing
  - moban
  - name: sentinel
    if: branch != master OR type = pull_request
  - name: unsupported
    if: branch = master AND type = push

.check_moban: &check_moban
  <<: *disable_global
  language: python
  python: 3.6
  stage: moban
  install: pip install moban
  script: .ci/check_moban.sh
  if: branch != master OR type = pull_request

jobs:
  include:
    - stage: sentinel
      # All other jobs will be cancelled if the sentinel job fails
      <<: *disable_global
      language: python
      python: 3.6
      install: pip install -r requirements.txt ".[alldeps]"
      script: coala --non-interactive -V

    - python: 2.7
      language: python
      stage: unsupported
      env: PIP_NO_COMPILE=1
      addons: false
      before_install: true
      install: pip install 3to2
      before_script: true
      script: .ci/check_unsupported.sh
    - python: 3.3
      language: python
      stage: unsupported
      env: PIP_NO_COMPILE=1
      addons: false
      before_install: true
      install: true
      before_script: true
      script: .ci/check_unsupported.sh

    - python: 3.6
      language: python
      stage: moban
      addons: false
      cache: pip
      before_install: false
      install: pip install moban
      before_script: false
      script: .ci/check_moban.sh
      after_success: false
      after_failure: false
      if: branch = master AND type = push

    - stage: test-python

      language: python
      python: 3.6
      addons:
        apt:
          packages: clang-3.4
    - language: python
      python: 3.5
      addons:
        apt:
          packages: clang-3.4
    - language: python
      python: 3.4
      addons:
        apt:
          packages: clang-3.4

    - stage: test-languages

      language: node_js
      node_js: 5

    - language: ruby
      rvm: 2.4

    - language: go
      go: 1.11
      install: true

    - language: php
      php: 7.2

    - language: java
      jdk: oraclejdk8

    - language: perl

    - language: scala
      scala: 2.11

    - stage: test-other-versions

      language: node_js
      node_js: 10
    - language: node_js
      node_js: 9
    - language: node_js
      node_js: 8
    - language: node_js
      node_js: 7
    - language: node_js
      node_js: 6

    - language: ruby
      rvm: 2.3
    - language: ruby
      rvm: 2.2
    - language: ruby
      rvm: 2.1

    - language: go
      go: '1.10'
      install: true

    - language: php
      php: 5.5

    - language: scala
      jdk: oraclejdk8
      scala: 2.12.2

    - stage: test-failing
      # Fails on 'pear'
      language: php
      php: hhvm-3.18
      env: TODO=fixpear

    # Travis community supported languages

    - stage: test-travis-community-langs
      language: dart
      dart: 1.15.0

    - language: dart
      dart: 1.14.2

    - stage: test-failing
      language: elm
      elm: 0.19.0
      install: true  # bypass install of all package.json

    - stage: test-failing
      language: elm
      elm: 0.18.0
      install: true  # bypass install of all package.json

    - language: julia
      # default language is 0.6.4, and has problems with pre-installed Lint.jl
      julia: 1.1
      env: JL_PKG=CoalaBears
      install:
        - julia --color=yes .ci/deps.julia.jl
        # Verify compilation works
        - julia -e 'import Lint.lintfile'

    - language: julia
      # default language is 0.6.4, and has problems with pre-installed Lint.jl
      julia: 1.0
      env: JL_PKG=CoalaBears
      install:
        - julia --color=yes .ci/deps.julia.jl
        - julia -e 'import Lint.lintfile'

    - stage: test-travis-community-langs
      language: julia
      # default language is 0.6.4, and has problems with pre-installed Lint.jl
      # and `using` in .ci/deps.julia.jl also incompatible
      julia: 0.7.0
      env: JL_PKG=CoalaBears
      # install not provided https://github.com/travis-ci/travis-build/pull/1571
      install:
        - julia --color=yes .ci/deps.julia.jl
        - git diff JuliaProject.toml
        - cat Manifest.toml
        - julia -e 'import Lint.lintfile'

    - language: r
      r: devel
    - language: r
      r: release
    - language: r
      # default version is 3.6.0, and it doesnt do DESCRIPTION?
      r: oldrel

    # coala hacks for extra languages
    - stage: test-manual-langs

      language: lua
      env: BEARS=lua
      addons:
        apt:
          packages:
            - luarocks

    - stage: test-failing
      language: generic
      env: BEARS=infer INFER_VERSION=0.16.0 TODO=fixtests

    - language: generic
      env: BEARS=opam INFER_VERSION=0.7.0 PATH=$PATH:$HOME/infer-linux64-v$INFER_VERSION/infer/bin
      addons:
        apt:
          sources:
            - avsm
          packages:
            - camlp4-extra
            - ocaml
            - opam

    - stage: test-current
      language: generic
      env: BEARS=disabled BEAR_LIST="npm"

    - language: generic
      dist: precise
      env: BEARS=disabled BEAR_LIST="goreturns phpmd" GOPATH="/home/travis/gopath"

    - language: generic
      dist: trusty
      env: BEARS=disabled BEAR_LIST="phpmd goreturns" GOPATH="/home/travis/gopath"

    - language: generic
      dist: xenial
      env: BEARS=disabled BEAR_LIST="phpmd goreturns" GOPATH="/home/travis/gopath"

    - stage: test-failing
      language: generic
      ghc: 8.0.2
      env: TODO=update-apt-versions
      dist: precise
      addons:
        apt:
          sources:
            - deadsnakes
            - hvr-ghc
          packages:
            - cabal-install-1.24
            - ghc-8.0.2
            - happy-1.19.3
            - python3.4

    # language: haskell
    # ghc: "7.10"
    # language: haskell
    # ghc: 7.8
    # language: haskell
    # ghc: 7.6
    - language: haskell
      ghc: 8.0.2
    - language: haskell
      ghc: 8.4.1

    - language: dart
      dart: stable

    - stage: test-failing
      # Tailor depends on java 8
      language: java
      jdk: openjdk7
      env: TODO=disable-tailor
    - language: java
      jdk: openjdk6
      env: TODO=disable-tailor-and-more

    - stage: test-apt
      language: generic
      env: DIST=trusty BEARS=apt_get BEAR_LIST="astyle bakalint chktex cppcheck default-jre flawfinder indent licensecheck perlcritic phpcs ruby xmllint verilator"
      # php will pick language, and pre-install php-codesniffer
      # maybe can disable in deps.php.sh
      # better is move lang php to composer

      # mcs is a disabled bear
      addons:
        apt:
          sources:
            - sourceline:  # astyle
                deb http://ppa.launchpad.net/cs50/ppa/ubuntu trusty main
              key_url:
                https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x5BDA2E974A0E822C
              # also complaining about 6B05F25D762E3157
          packages:
            - astyle
            - chktex
            - cppcheck
            - devscripts
            - flawfinder
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php5-cli
            - php-codesniffer
            - shellcheck
            - verilator

    # BEARS=apt_get rather than 'apt' to avoid invoking .deps.apt.sh
    # which is the old circle init
    - stage: test-apt
      language: generic
      env: DIST=precise BEARS=apt_get
      dist: precise
      addons:
        apt:
          packages:
            # astyle incompatible
            - chktex
            - cppcheck
            - devscripts
            - flawfinder
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php5-cli
            # php-codesniffer  # linter error?
            - python3
            - verilator

    - stage: test-apt
      language: generic
      dist: xenial
      env: BEARS=adhoc BEAR_LIST="ghc-mod hlint"
      # ghc-mod needs parts of ghc, specifically at least /usr/lib/ghc/settings
      # ghc-mod needs cabal-install
      # hlint bear depends on --json, which isnt in trusty hlint
      # shellcheck is failing in xenial; new features probably
      addons:
        apt:
          packages:
            - cabal-install
            - ghc
            - ghc-mod
            - hlint

    - stage: test-failing
      language: generic
      env: BEARS=adhoc BEAR_LIST=phpcs DIST=precise
      dist: precise
      addons:
        apt:
          packages:
            - php-codesniffer

    - stage: test-failing
      language: generic
      env: BEARS=apt_get DIST=xenial
      dist: xenial
      addons:
        apt:
          packages:
            - astyle
            - chktex
            - cppcheck
            - flawfinder
            - indent
            - julia
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php7.0-cli
            - php-codesniffer
            - r-cran-formatr
            - shellcheck
            - verilator

    - *check_moban
  allow_failures:
    - *check_moban

cache:
  pip: true
  directories:
    - docs/_build
    # Installed language package caches
    - ~/.cabal
    - ~/.ghc
    - ~/.ghc-mod
    - ~/R/Library
    - ~/.julia
    - ~/.luarocks
    - $TRAVIS_BUILD_DIR/node_modules
    - $TRAVIS_BUILD_DIR/.bundle
    - $TRAVIS_BUILD_DIR/vendor
    # coala managed data
    - ~/nltk_data
    # Installed linters
    # Check this version works
    - ~/infer-linux64-v$INFER_VERSION
    - ~/.local/

env:
  global:
    - TERM=dumb
    - R_LIB_USER=~/R/Library
    - LINTR_COMMENT_BOT=false
    - CABAL_VERSION=1.24
    - PATH="$HOME/.local/bin:/opt/cabal/$CABAL_VERSION/bin:$PATH:$TRAVIS_BUILD_DIR/node_modules/.bin:$TRAVIS_BUILD_DIR/vendor/bin:$HOME/.cabal/bin:$HOME/.local/tailor/tailor-latest/bin:$HOME/.luarocks/bin"

before_install:
  - printenv
  - mkdir -p ~/bin ~/.local/bin
  # echo $TRAVIS_LANGUAGE
  - if [ -f .ci/deps.$TRAVIS_LANGUAGE.sh ]; then
      bash -e -x .ci/deps.$TRAVIS_LANGUAGE.sh;
    fi

  - python --version
  # ~/bin is uncached; ~/local/bin is cached; we dont want python/pip in latter
  - rm -f ~/.local/bin/python* ~/.local/bin/pip*

  - source .ci/deps.pyenv.sh
  - pyenv versions
  - pyenv versions --bare
  # node-gpy needs py27
  - if [ "$TRAVIS_LANGUAGE" = "node_js" ]; then pyenv global 2.7; hash -r; fi
  - if [ "$BEARS" = "infer" ]; then pyenv global 2.7; hash -r; fi
  - pyenv versions
  - python --version
  # if [[ -z "$TRAVIS_PYTHON_VERSION" ]]; then .ci/ensure_python3.sh; fi

  # Install latest stable version of Go using gimme
  # gimme 1.11.5 > setup_go_root.sh
  # source setup_go_root.sh
  # nvm install 6.10.2
  # Remove Ruby directive from Gemfile as this image has 2.2.5
  - sed -i '/^ruby/d' Gemfile

  # Used by go, to do nothing
  - if [ -f .ci/$TRAVIS_LANGUAGE.GNUMakefile ]; then
      ln -s .ci/$TRAVIS_LANGUAGE.GNUMakefile ./GNUMakefile;
    fi
  # https://github.com/coala/coala/issues/3183
  - cp requirements.txt requirements.orig
  - printf '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'
           "tox-travis" "tox-backticks" "tox-pyenv" "tox-venv"
           "$(cat test-requirements.txt)"
           "$(grep -v '^-r' docs-requirements.txt)"
           "$(cat bear-requirements.txt requirements.txt)"
           > requirements.txt
  - ls -al requirements.txt GNUMakefile || true

before_script:
  - source .ci/deps.python36.sh
  - hash -r
  - pyenv versions
  - python --version
  - mv requirements.orig requirements.txt

script:
  - echo "SCRIPT HERE"
  # python setup.py bdist_wheel
  # pip install $(ls ./dist/*.whl)"[alldeps]"
  # coala --non-interactive
  - if [ -z "$TRAVIS_PYTHON_VERSION" ]; then
      pyenv global $(pyenv versions --bare | fgrep '3.6' --max-count 1)
                   $(pyenv versions --bare | fgrep '2.7' --max-count 1);
      hash -r;
    fi
  - python --version
  # Ensure metadata files are in sync with the bear metadata in the source
  - if [ -n "$TRAVIS_PYTHON_VERSION" ]; then
      PYTHONPATH=. .ci/generate_bear_metadata.py --debug --update;
      git diff;
    fi
  - if [ "$TRAVIS_LANGUAGE" != "python" ]; then
      python -m pip install --user tox-travis tox-backticks tox-pyenv tox-venv;
    fi
  - python -m tox
  # codecov
  # python setup.py docs

notifications:
  email: false

branches:
  exclude:
    - /^sils\//
