sudo: false
dist: xenial
language: python
python: 3.6.3
notifications:
  email: false

stages:
  - name: sentinel
    if: branch != master OR type = pull_request
  - test-languages
  - test-other-versions
  - moban
  - name: test-master
  # if: branch = master AND type = push
  - name: unsupported
  # if: branch = master AND type = push

.disable_global: &disable_global
  addons: false
  cache: false
  env: {}
  python: false
  before_install: false
  install: false
  before_script: false
  script: false
  after_success: false
  after_failure: false
  before_deploy: false
  deploy: false

.moban: &moban
  <<: *disable_global
  python: 3.6
  stage: moban
  install: pip install moban>=0.0.4
  script:
    - moban
    - git diff --exit-code

jobs:
  include:
    # Manually added "language" entries should complete test coverage
    - stage: test-languages
      language: lua
      env: BEARS=lua
      addons:
        apt:
          packages:
            - luarocks

    - stage: test-languages
      language: generic
      env: BEARS=opam INFER_VERSION=0.7.0
           PATH=$PATH:$HOME/infer-linux64-v$INFER_VERSION/infer/bin
      addons:
        apt:
          sources:
            - avsm
          packages:
            - camlp4-extra
            - ocaml
            - opam

    - stage: test-languages
      # This is in generic image, as language: haskell isnt working yet
      # https://github.com/coala/coala-bears/issues/1384
      language: generic
      dist: xenial
      env: DIST=xenial BEARS=adhoc BEAR_LIST="ghc-mod"
      # ghc-mod needs parts of ghc, specifically at least /usr/lib/ghc/settings
      # ghc-mod needs cabal-install
      addons:
        apt:
          packages:
            - cabal-install
            - ghc
            - ghc-mod

    - stage: test-languages
      language: generic
      dist: xenial
      env: DIST=xenial BEARS=adhoc BEAR_LIST="apt_get bakalint default-jre"
           DISABLE_BEARS="astyle flawfinder ghc-mod r_script shellcheck"
      # astyle and shellcheck are failing in xenial
      # xenial doesnt have Python 2.7 needed for flawfinder
      # R bears and ghc_mod use separate jobs
      addons:
        apt:
          packages:
            - chktex
            - cppcheck
            - devscripts
            - hlint
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php7.0-cli
            - phpmd
            - php-codesniffer
            - verilator

    - stage: test-languages
      language: generic
      dist: trusty
      env: DIST=trusty BEARS=adhoc BEAR_LIST="astyle flawfinder shellcheck"
      addons:
        apt:
          sources:
            - sourceline:  # astyle
                deb http://ppa.launchpad.net/cs50/ppa/ubuntu trusty main
              key_url:
                https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x5BDA2E974A0E822C
          packages:
            - astyle
            - flawfinder
            - shellcheck

    # Additonal manual entries
    - stage: test-other-versions
      os: windows
      language: bash
      python: 3.6.8
      env:
        BEAR_LIST="astyle cppcheck xmllint"
        TOX_TEST_SELECTORS=pip-noreqs-npm-gem-go-perl-php-java8-adhoc
      cache:
        directories:
          - C:/nuget_http_cache/
          - C:/choco_cache/
          - C:/pip_cache/
      before_install:
        - bash --version
        - powershell -c "$PSVersionTable"
        - powershell -c 'Set-MpPreference -DisableRealtimeMonitoring $true'
        - powershell -c 'Set-MpPreference -DisableArchiveScanning $true'
        - powershell -c 'Set-MpPreference -DisableBehaviorMonitoring $true'

        - export NUGET_HTTP_CACHE_PATH=/C/nuget_http_cache
        - export CHOCO_CACHE_DIR=/C/choco_cache
        - export PIP_CACHE_DIR=/C/pip_cache

        - export TOXENV=py36-${TOX_TEST_SELECTORS}-${TOX_FEATURES}-win

        - printenv

        - cp .ci/choco.config $ChocolateyInstall/config/chocolatey.config
        - powershell -c "Set-ExecutionPolicy -ExecutionPolicy Unrestricted
                                             -Scope LocalMachine"

        - python .ci/store_env_in_registry.py
        - source .ci/refreshenv.sh

        # TODO: Add support for disabling pre-installed vctools which is
        # disabled in choco_requirements.  Uninstalling vctools fails
      install:
        - powershell -c ". .ci/Fudge.ps1 install"
        - refreshenv
        - taskkill -IM "gpg-agent.exe" || true
      before_script:
        - python --version
        - cp tox.ini tox.orig
        - "sed -i 's/^envlist.*$/envlist: '$TOXENV/ tox.ini"
        - export TOX_SITEPACKAGES=true
        - export VIRTUALENV_NO_PIP=1
        - export VIRTUALENV_NO_SETUPTOOLS=1
        - pip uninstall tox-venv || true
      script:
        - python -m tox --sitepackages
      after_script:
        - cp tox.orig tox.ini

    - stage: test-other-versions
      language: ruby
      rvm: 2.5
      env: DISABLE_BEARS=csvlint

    - stage: test-other-versions
      language: java
      jdk: openjdk11
      env: DISABLE_BEARS="languagetool tailor"
    # openjdk10 and openjdk9 are broken on Travis
    # https://github.com/travis-ci/travis-cookbooks/issues/976
    # They need the same configuration as openjdk11:
    # env: DISABLE_BEARS="languagetool tailor"
    - stage: test-other-versions
      language: java
      jdk: openjdk7
      env: DISABLE_BEARS=tailor

    # BEARS=apt_get allows matching bears to be skipped
    - stage: test-other-versions
      language: generic
      dist: bionic
      env: DIST=bionic BEARS=apt_get DISABLE_BEARS=shellcheck
      addons:
        apt:
          packages:
            - chktex
            - cppcheck
            - devscripts
            - flawfinder
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php7.0-cli
            - phpmd
            - php-codesniffer
            - verilator

    - stage: test-other-versions
      language: generic
      env: DIST=trusty BEARS=apt_get
      dist: trusty
      addons:
        apt:
          packages:
            - chktex
            - cppcheck
            - devscripts
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php5-cli
            - php-codesniffer
            - verilator

    - stage: test-sentinel
      language: generic
      env: DIST=precise BEARS=apt_get
      dist: precise
      addons:
        apt:
          packages:
            - chktex
            - cppcheck
            - devscripts
            - indent
            - libperl-critic-perl
            - libxml2-utils
            - mono-mcs
            - php5-cli
            - python3
            - verilator

    - python: 2.7
      language: python
      stage: unsupported
      env: PIP_NO_COMPILE=1
      addons: false
      before_install: true
      install: pip install 3to2
      before_script: true
      script: .ci/check_unsupported.sh
    - python: 3.3
      language: python
      stage: unsupported
      env: PIP_NO_COMPILE=1
      addons: false
      before_install: skip
      install: skip
      before_script: skip
      script: .ci/check_unsupported.sh

    - python: 3.6
      language: python
      stage: moban
      addons: false
      cache: pip
      before_install: false
      install: pip install moban
      before_script: false
      script: .ci/check_moban.sh
      after_success: false
      after_failure: false
      if: branch = master AND type = push


    # Entries generates from `supported_versions`
    - stage: sentinel
      language: python
      python: 3.6
      addons:
        apt:
          packages: clang-3.4

    - stage: test-languages
      language: python
      python: 3.5
      addons:
        apt:
          packages: clang-3.4

    - stage: test-other-versions
      language: python
      python: 3.4.4
      addons:
        apt:
          packages: clang-3.4

    - stage: test-languages
      language: csharp
      mono: 5.20.1

    - stage: test-languages
      language: r
      r: release
      cache: packages

    - stage: test-other-versions
      language: r
      r: devel
      cache: packages

    - stage: test-other-versions
      language: r
      r: oldrel
      cache: packages

    - stage: test-languages
      language: node_js
      node_js: '10'
      cache: npm

    - stage: test-other-versions
      language: node_js
      node_js: 9
      cache: npm

    - stage: test-other-versions
      language: node_js
      node_js: 8
      cache: npm

    - stage: test-other-versions
      language: node_js
      node_js: 7
      cache: npm

    - stage: test-other-versions
      language: node_js
      node_js: 6
      cache: npm

    - stage: test-languages
      language: julia
      julia: 1.1
      env: JL_PKG=CoalaBears
      install:
        - julia --color=yes .ci/deps.julia.jl
        # Verify compilation works
        - julia -e 'import Lint.lintfile'

    - stage: test-other-versions
      language: julia
      julia: 1.0
      env: JL_PKG=CoalaBears
      install:
        - julia --color=yes .ci/deps.julia.jl
        # Verify compilation works
        - julia -e 'import Lint.lintfile'

    - stage: test-other-versions
      language: julia
      julia: 0.7.0
      env: JL_PKG=CoalaBears
      install:
        - julia --color=yes .ci/deps.julia.jl
        # Verify compilation works
        - julia -e 'import Lint.lintfile'

    - stage: test-languages
      language: dart
      dart: 1.15.0

    - stage: test-other-versions
      language: dart
      dart: 1.14.2

    - stage: test-languages
      language: perl
      perl: 5.14
      # trusty is installing into py27
      dist: xenial
      cache:
        directories:
          - $HOME/perl5

    - stage: test-languages
      language: go
      go: 1.11
      install: skip
      cache:
        directories:
          - $HOME/.cache/go-build
          - $HOME/gopath/pkg/mod

    - stage: test-other-versions
      language: go
      go: '1.10'
      install: skip
      cache:
        directories:
          - $HOME/.cache/go-build
          - $HOME/gopath/pkg/mod

    - stage: test-languages
      language: ruby
      rvm: 2.4
      cache: bundler

    - stage: test-other-versions
      language: ruby
      rvm: 2.3
      cache: bundler

    - stage: test-other-versions
      language: ruby
      rvm: 2.2
      cache: bundler

    - stage: test-other-versions
      language: ruby
      rvm: 2.1
      cache: bundler

    - stage: test-languages
      language: php
      php: 7.2

    # stage: test-other-versions
    # language: php
    # php: hhvm-3.18

    - stage: test-other-versions
      language: php
      php: 5.5

    - stage: test-languages
      language: scala
      scala: 2.11

    - stage: test-other-versions
      language: scala
      scala: 2.12.2
      jdk: openjdk8

    - stage: test-languages
      language: java
      jdk: openjdk8

    - *moban
  allow_failures:
    - *moban

cache:
  pip: true
  directories:
    - docs/_build
    # Installed language package caches
    - ~/.cabal
    - ~/.ghc
    - ~/.ghc-mod
    - ~/R/Library
    - ~/.julia
    - ~/.luarocks
    - $TRAVIS_BUILD_DIR/node_modules
    - $TRAVIS_BUILD_DIR/.bundle
    - $TRAVIS_BUILD_DIR/vendor
    # coala managed data
    - ~/nltk_data
    # Installed linters
    - ~/infer-linux64-v$INFER_VERSION
    - ~/.local/

env:
  global:
    - TERM=dumb
    - LINTR_COMMENT_BOT=false
    - PATH="$HOME/.local/bin:$PATH:$TRAVIS_BUILD_DIR/node_modules/.bin:$TRAVIS_BUILD_DIR/vendor/bin:$HOME/.local/tailor/tailor-latest/bin:$HOME/.luarocks/bin"
    # These are only needed by Windows
    - NUGET_EXE_NO_PROMPT=true
    - VIRTUALENV_NO_DOWNLOAD=1
    # Enable to debug tox
    - VIRTUALENV_VERBOSE=1
    # This exceeds the travis maximum log length
    # PIP_VERBOSE=1
    - PIP_DISABLE_PIP_VERSION_CHECK=1
    - PIP_YES=1
    - FudgeCI=${TRAVIS_BUILD_DIR}/.ci/
    - TOX_FEATURES=check-noskip-codecov

stage: test

before_install:
  - printenv
  - mkdir -p ~/bin ~/.local/bin

  - python --version

  - if [ -z "$TRAVIS_PYTHON_VERSION" ]; then
      .ci/deps.pyenv.sh && .ci/deps.python36.sh;
    fi
  - if [ "${TRAVIS_PYTHON_VERSION/3.4/}" != "$TRAVIS_PYTHON_VERSION" ]; then
      pip install pip==9.0.3 setuptools==21.2.2;
    fi

  - if [ -f .ci/deps.$TRAVIS_LANGUAGE.sh ]; then
      bash -e -x .ci/deps.$TRAVIS_LANGUAGE.sh;
    fi

  # https://github.com/coala/coala/issues/3183
  - cp requirements.txt requirements.orig
  - printf '%s\n%s\n%s\n'
           "$(cat test-requirements.txt)"
           "$(grep -v '^-r' docs-requirements.txt)"
           "$(cat bear-requirements.txt requirements.txt)"
           > requirements.txt

before_script:
  - mv requirements.orig requirements.txt
  - if [ -n "$TRAVIS_PYTHON_VERSION" ]; then
      python setup.py bdist_wheel &&
      pip install $(ls ./dist/*.whl)"[alldeps]";
    fi

script:
  - if [ -z "$TRAVIS_PYTHON_VERSION" ]; then
      python -m pip install --upgrade --user -r test-requirements.txt;
    fi
  # Ensure metadata files are in sync with the bear metadata in the source
  - if [ -n "$TRAVIS_PYTHON_VERSION" ]; then
      PYTHONPATH=. .ci/generate_bear_metadata.py --debug --update;
    fi
  - if [ "${TRAVIS_PYTHON_VERSION/3.4/}" != "$TRAVIS_PYTHON_VERSION" ]; then
      pip install --upgrade setuptools;
    fi
  - python -m tox -vvv
  - if [ -n "$TRAVIS_PYTHON_VERSION" ]; then
      python setup.py docs;
    fi
  - if [ -n "$TRAVIS_PYTHON_VERSION" ]; then
      coala --non-interactive;
    fi

branches:
  exclude:
    - /^sils\//
